<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on sh1marin&#39;s Blog</title>
    <link>https://blog.sh1mar.in/tags/linux/</link>
    <description>Recent content in linux on sh1marin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.sh1mar.in/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arch Linux Installation Guide</title>
      <link>https://blog.sh1mar.in/post/arch-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/arch-installation/</guid>
      <description>Arch installation Get arch Download Arch Linux from https://archlinux.org/download/ and follow guide from https://wiki.archlinux.org/index.php/Installation_guide
Before boot (OPTIONAL) You can press e to edit install configuration like:
# If you think the screen is too small. nomodset video=800x450 Setting font (OPTIONAL) If you think the font is too small and hard to look, you can change font for a more comfortable look.
setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x12.gz Configure key (OPTIONAL) touch keys.conf #-------edit--------# keycode 1 = Caps_Lock keycode 58 = Escape #----end of edit-----# loadkeys keys.</description>
    </item>
    
    <item>
      <title>Simple Terminal - simple and suckless terminal</title>
      <link>https://blog.sh1mar.in/post/simple-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/simple-terminal/</guid>
      <description>Simple Terminal 的搭建和配置 前言 Simple Terminal 是一个基于 X 的终端，拥有非常棒的 Unicode 和 Emoji 的支持，同时也支持 256 色，拥有绝大部分的终端特性，但是却极其微小，就算在我打了许多补丁之后，他仍然只占用 108K 的存储空间，快且轻量，是重度终端用户的一个很不错的选择。
本篇文章目的在教你打造一个自己的 st，如果没有需求也可以前往我的仓库克隆我的源码，直接编译安装就可以了。
下载源码 Simple Terminal 的官网：https://st.suckless.org/ ，不需要下载 Download 的那个 st ，直接 clone 源码仓库就好：
git clone https://git.suckless.org/st 安装依赖 Simple Terminal (以下简称 st) 需要 libx11-dev 和 libxft-dev 两个包，对于 Debian 和 Ubuntu 用户来说直接使用 apt 安装即可，Arch 系的大部分发行版都已经包含。
克隆官方的仓库之后，编辑 config.mk 文件，编译时 st 会基于这个文件进行配置，一般来说只需要改两行即可：
X11INC = /usr/local/X11 X11LIB = /usr/local/X11 然后用 root 权限执行编译安装：
sudo make clean install 文件会复制到 /usr/local/bin/ 目录下，一般直接执行就能启动。</description>
    </item>
    
    <item>
      <title>一个测试终端 IO 速度的脚本</title>
      <link>https://blog.sh1mar.in/post/linux/write-a-script-to-test-terminal-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/linux/write-a-script-to-test-terminal-io/</guid>
      <description>前言 今天学到了一个新的知识：终端的绘制性能会影响程序的性能。当一个程序以单线程 运行时，终端输出和文件 IO 都在同一个线程，终端如果绘制速度慢，因为 IO 是阻塞的 ，程序内部的 stdout 执行速度也会下降。
测试 那么有什么办法可以测试一下哪些终端绘制速度比较快呢？我在 Rust CN 群看到的这 么个办法：同时跑文件 IO 和终端 IO 来测试。有一个方式是用 find 来遍历系统内 所有文件，因为 find 毎找到一个文件都会输出一次，我们从根目录开始 find，就可 以实现同时高频率的文件 IO 和终端 IO 了。所以这里我们只需要简单的 find / 即 可。
而运行时间的测试则用 shell 提供的 time 函数来测试。
为了比对各个终端，我做了一些额外工作来获取终端的名字。具体脚本如下：
#!/bin/bash  # 这里获取运行中的终端名字 get_terminal() { PARENT_SHELL=$(ps -p $$ -o ppid=) PARENT_TERMINAL=$(ps -p $PARENT_SHELL -o ppid=) TERMINAL=$(ps -p $PARENT_TERMINAL o args=) printf $TERMINAL } # 测试 time find / # 方便分清各个不同的终端 echo -e &amp;#34;\n\nTesting in terminal: $(get_terminal)&amp;#34; 结果 其中 Alacritty 和 simple terminal 打得不相上下，而 kitty 稍逊一筹，konsole （右下） 是最慢的。后续我再运行了几次结果都相近。</description>
    </item>
    
    <item>
      <title>使用Linux搭建NAS</title>
      <link>https://blog.sh1mar.in/post/linux%E4%B8%8B%E9%85%8D%E7%BD%AEnas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/linux%E4%B8%8B%E9%85%8D%E7%BD%AEnas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%E7%BB%8F%E9%AA%8C/</guid>
      <description>Linux下配置NAS的一些总结经验 前言 经历了上一次的Windows Server的痛苦配置以后，我决定换成Linux来配置NAS。相对于Windows平台，Linux平台会更加自由和简洁。而且清晰的权限和后台也要比Win更加干净，唯一的弊端就是要去学不少命令。但是我这里会帮你总结好大部分要用到的命令，快速帮你搭建好Linux平台下的NAS。
Linux的系统选择 我选择的是Ubuntu 18.04。但是对于NAS来说，稳定且更新少是必要需求，所以我更加推荐Arch Linux。简洁干净，最好减少桌面配置，减少GPU占用。
配置思路  SMB高速传输 基于Web的离线下载 SSH命令行和Web页面管理系统   系统安装 下载好.iso文件以后，用UltraISO烧录进U盘里。然后重启，按F12进入BIOS，检查启动列表，要打开UEFI启动选项。然后保存设置退出，按F8打开启动列表，选择UEFI 你的U盘。进入系统选择第一项，直接安装。关于硬盘配置，我只有一个SSD和一个HDD，所以把系统安装在SSD，让安装程序自动分区，HDD自动挂载用来做数据盘。其余没什么好说的，按照自己的需求一直下一部就行了。
NAS正式配置 SAMBA配置 一、安装Ubuntu SAMBA服务器
 更新软件源：输入命令sudo apt-get update更新软件源 安装SAMBA服务：输入命令sudo apt-get install samba安装SAMBA服务器。  二、创建SAMBA配置文件
 创建共享目录：sudo mkdir -p /你的共享文件夹路径 #mkdir -p 用来创建路径中不存在的路径。 修改配置文件：sudo vim /etc/samba/smb.conf #没有vim的请输入命令sudo apt-get vim  vim的使用方法  进入配置文件之后，按i进入编辑模式，把所有字段全部删除，输入以下配置(#号后注释文字要删除）：
[你的配置名] #这里是分享路径配置 comment = User&amp;#39;s NAS #这一段是标记，对配置没有影响。 path = /你的共享文件夹路径 #写上你自己的共享路径 read only = no #是否只读 browseable = yes #是否可浏览 [另一个配置名] #如果同一台机子你想分开共享路径，就把上面的配置复制到这里。 三、创建SAMBA用户</description>
    </item>
    
    <item>
      <title>如何配置 Arch Linux</title>
      <link>https://blog.sh1mar.in/post/configure-arch-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/configure-arch-linux/</guid>
      <description>Network Update 安装必要的软件 添加用户 在 VMWare 上装 Arch 的设置（可选）  添加驱动 安装   安装桌面环境  Install Display manager 自启动 HiDPI   分辨率 装点别的  输入法 Network manager 字体 终端 壁纸 通知系统   主题 常见错误  Network 如果你有跟着我上一篇文章，安装了 NetworkManager，此时你 可以输入命令 nmtui 来打开一个终端网络管理器来管理网络。
#启动网络管理器的 daemon systemctl start NetworkManager.service #设置为开机自启动 systemctl enable NetworkManager.service #启动终端管理器 nmtui 如果没有安装，那你可能需要把 U盘插上，mount 好分区之后 重新 chroot，并安装需要的网络管理器。
Update 然后执行命令更新：
pacman -Syu 安装必要的软件 pacman -S man base-devel 添加用户 创建一个叫做 TOM 的用户（把 TOM 换成你的名字）：</description>
    </item>
    
  </channel>
</rss>
