<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terminal on sh1marin&#39;s Blog</title>
    <link>https://blog.sh1mar.in/tags/terminal/</link>
    <description>Recent content in terminal on sh1marin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.sh1mar.in/tags/terminal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple Terminal - simple and suckless terminal</title>
      <link>https://blog.sh1mar.in/post/simple-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/simple-terminal/</guid>
      <description>Simple Terminal 的搭建和配置 前言 Simple Terminal 是一个基于 X 的终端，拥有非常棒的 Unicode 和 Emoji 的支持，同时也支持 256 色，拥有绝大部分的终端特性，但是却极其微小，就算在我打了许多补丁之后，他仍然只占用 108K 的存储空间，快且轻量，是重度终端用户的一个很不错的选择。
本篇文章目的在教你打造一个自己的 st，如果没有需求也可以前往我的仓库克隆我的源码，直接编译安装就可以了。
下载源码 Simple Terminal 的官网：https://st.suckless.org/ ，不需要下载 Download 的那个 st ，直接 clone 源码仓库就好：
git clone https://git.suckless.org/st 安装依赖 Simple Terminal (以下简称 st) 需要 libx11-dev 和 libxft-dev 两个包，对于 Debian 和 Ubuntu 用户来说直接使用 apt 安装即可，Arch 系的大部分发行版都已经包含。
克隆官方的仓库之后，编辑 config.mk 文件，编译时 st 会基于这个文件进行配置，一般来说只需要改两行即可：
X11INC = /usr/local/X11 X11LIB = /usr/local/X11 然后用 root 权限执行编译安装：
sudo make clean install 文件会复制到 /usr/local/bin/ 目录下，一般直接执行就能启动。</description>
    </item>
    
    <item>
      <title>一个测试终端 IO 速度的脚本</title>
      <link>https://blog.sh1mar.in/post/linux/write-a-script-to-test-terminal-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sh1mar.in/post/linux/write-a-script-to-test-terminal-io/</guid>
      <description>前言 今天学到了一个新的知识：终端的绘制性能会影响程序的性能。当一个程序以单线程 运行时，终端输出和文件 IO 都在同一个线程，终端如果绘制速度慢，因为 IO 是阻塞的 ，程序内部的 stdout 执行速度也会下降。
测试 那么有什么办法可以测试一下哪些终端绘制速度比较快呢？我在 Rust CN 群看到的这 么个办法：同时跑文件 IO 和终端 IO 来测试。有一个方式是用 find 来遍历系统内 所有文件，因为 find 毎找到一个文件都会输出一次，我们从根目录开始 find，就可 以实现同时高频率的文件 IO 和终端 IO 了。所以这里我们只需要简单的 find / 即 可。
而运行时间的测试则用 shell 提供的 time 函数来测试。
为了比对各个终端，我做了一些额外工作来获取终端的名字。具体脚本如下：
#!/bin/bash  # 这里获取运行中的终端名字 get_terminal() { PARENT_SHELL=$(ps -p $$ -o ppid=) PARENT_TERMINAL=$(ps -p $PARENT_SHELL -o ppid=) TERMINAL=$(ps -p $PARENT_TERMINAL o args=) printf $TERMINAL } # 测试 time find / # 方便分清各个不同的终端 echo -e &amp;#34;\n\nTesting in terminal: $(get_terminal)&amp;#34; 结果 其中 Alacritty 和 simple terminal 打得不相上下，而 kitty 稍逊一筹，konsole （右下） 是最慢的。后续我再运行了几次结果都相近。</description>
    </item>
    
  </channel>
</rss>
